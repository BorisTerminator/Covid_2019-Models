import os
import subprocess
import sys
import pickle
import json
from datetime import datetime

import numpy as np
from scipy.optimize import curve_fit

print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –î–õ–Ø C++ –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò")
print("=" * 60)

# =============================================================================
# –®–ê–ì 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ C++
# =============================================================================

def setup_cpp_compilation():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç C++ –∫–æ–º–ø–∏–ª—è—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê C++ –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MinGW
    mingw_path = r"C:\mingw64"
    if os.path.exists(mingw_path):
        os.environ['PATH'] = mingw_path + r'\bin;' + os.environ['PATH']
        os.environ['CPATH'] = mingw_path + r'\include'
        os.environ['LIBRARY_PATH'] = mingw_path + r'\lib'
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è: {mingw_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
    try:
        result = subprocess.run(['g++', '--version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ g++ –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.splitlines()[0]}")
            return True
        else:
            print("‚ùå g++ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ g++: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
cpp_compilation_available = setup_cpp_compilation()

# =============================================================================
# –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
# =============================================================================

print("\nüì¶ –ò–ú–ü–û–†–¢ –ë–ò–ë–õ–ò–û–¢–ï–ö –° –ö–û–ú–ü–ò–õ–Ø–¶–ò–ï–ô...")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PyTensor –î–û –∏–º–ø–æ—Ä—Ç–∞
if cpp_compilation_available:
    os.environ['PYTENSOR_FLAGS'] = 'optimizer=fast_run,mode=FAST_RUN'
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
else:
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Python —Ä–µ–∂–∏–º (–±–µ–∑ C++ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import arviz as az
import pymc as pm
import pytensor
import pytensor.tensor as pt
from scipy import stats as sps

print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

# =============================================================================
# –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ C++
# =============================================================================

def verify_cpp_compilation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ C++ –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê C++ –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò...")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        x = pt.dvector('x')
        y = pt.dvector('y')
        z = x + y * pt.sin(x) + pt.exp(-x**2)
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º
        f = pytensor.function([x, y], z)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        x_test = np.array([1.0, 2.0, 3.0])
        y_test = np.array([0.5, 1.0, 1.5])
        result = f(x_test, y_test)
        
        print(f"‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
        print(f"   –¢–∏–ø –ª–∏–Ω–∫–µ—Ä–∞: {type(f.maker.linker).__name__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        linker_type = type(f.maker.linker).__name__
        if 'VM' in linker_type or 'C' in linker_type:
            print("üéâ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è C++ –∫–æ–º–ø–∏–ª—è—Ü–∏—è!")
            return True
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python —Ä–µ–∂–∏–º")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
cpp_working = verify_cpp_compilation() if cpp_compilation_available else False

print(f"\nüìä –°–¢–ê–¢–£–° –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò: {'C++ üöÄ' if cpp_working else 'Python ‚ö†Ô∏è'}")

# =============================================================================
# –®–ê–ì 4: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ 
# =============================================================================

def get_delay_distribution(max_days=20): # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫ –ø–æ–ø–∞–¥—ë—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    –ß–µ–ª–æ–≤–µ–∫ –∑–∞—Ä–∞–∂–∞–µ—Ç—Å—è ‚Üí –ø—Ä–æ—Ö–æ–¥–∏—Ç 3‚Äì10 –¥–Ω–µ–π ‚Üí –µ–≥–æ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç ‚Üí –æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ç—á—ë—Ç."""
    mean_delay = 8.0 # —Å—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–¥–Ω–µ–π)
    std_delay = 4.0
    mu = np.log(mean_delay**2 / np.sqrt(std_delay**2 + mean_delay**2))
    sigma = np.sqrt(np.log(std_delay**2 / mean_delay**2 + 1))
    dist = sps.lognorm(s=sigma, scale=np.exp(mu)) # —Å—á–∏—Ç–∞–µ–º –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    days = np.arange(0, max_days)
    cdf_vals = dist.cdf(days)
    pmf = np.diff(np.concatenate([[0], cdf_vals]))
    pmf /= pmf.sum()  # –≠—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (CDF) –≤ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (PMF) ‚Äî
# —Ç.–µ. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç—á—ë—Ç –æ —Å–ª—É—á–∞–µ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1, 2, ‚Ä¶ 20 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è.
    return pmf

def get_generation_time_pmf(max_days=20):
    """–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∫–æ–ª–µ–Ω–∏–π (serial interval)
    –≠—Ç–æ –≤—Ä–µ–º—è –º–µ–∂–¥—É –º–æ–º–µ–Ω—Ç–æ–º –∑–∞—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ–º –∏–º –¥—Ä—É–≥–æ–≥–æ."""
    mean_si = 4.7 # —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∫–æ–ª–µ–Ω–∏–π (–¥–Ω–µ–π)
    std_si = 2.9
    mu_si = np.log(mean_si ** 2 / np.sqrt(std_si ** 2 + mean_si ** 2))
    sigma_si = np.sqrt(np.log(std_si ** 2 / mean_si ** 2 + 1))
    dist = sps.lognorm(scale=np.exp(mu_si), s=sigma_si)
    
    # Discretize the Generation Interval up to 20 days max
    g_range = np.arange(0, max_days)
    gt = pd.Series(dist.cdf(g_range), index=g_range)
    gt = gt.diff().fillna(0)
    gt /= gt.sum()
    return gt.values

def _get_convolution_ready_gt(len_observed, gt_pmf):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è  - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã —Å–≤–µ—Ä—Ç–∫–∏"""
    gt = gt_pmf
    convolution_ready_gt = np.zeros((len_observed - 1, len_observed))
    for t in range(1, len_observed):
        begin = np.maximum(0, t - len(gt) + 1)
        slice_update = gt[1 : t - begin + 1][::-1]
        convolution_ready_gt[t - 1, begin : begin + len(slice_update)] = slice_update
    convolution_ready_gt = pytensor.shared(convolution_ready_gt)
    return convolution_ready_gt


def exponential_growth(x, a, b):
    """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–æ—Å—Ç–∞: y = a * exp(b * x)"""
    return a * np.exp(b * x)

def load_country_data(country_name, start_date="2020-01-01", end_date="2020-12-01"):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ 250 –¥–Ω–µ–π"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ COVID
    df = pd.read_csv(r'C:\Data\Visual Studio\–í–£–ó\–¢–µ–æ—Ä–≤–µ—Ä\results\covid_data.csv', parse_dates=["date"])
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —Ç–µ—Å—Ç–∞–º–∏
    tests_df = pd.read_csv(r'C:\Data\Visual Studio\–í–£–ó\–¢–µ–æ—Ä–≤–µ—Ä\results\full-list-total-tests-for-covid-19.csv', 
                          parse_dates=["Day"])
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–µ
    country_data = df[df["location"] == country_name].copy()
    country_data = country_data.set_index("date").loc[start_date:end_date]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
    country_tests = tests_df[tests_df["Entity"] == country_name].copy()
    country_tests = country_tests.set_index("Day").sort_index()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏
    if country_name == "Germany":
        print("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ—Å—Ç–∞—Ö
        first_test_date = country_tests.index.min()
        first_test_value = country_tests['Cumulative total tests'].iloc[0]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        full_date_range = pd.date_range(
            start=country_data.index.min(),
            end=country_data.index.max(),
            freq='D'
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        daily_tests_data = []
        
        # 1. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 0 –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if pd.notna(first_test_date):
            # –ü–µ—Ä–∏–æ–¥ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            period_before_first = full_date_range[full_date_range < first_test_date]
            
            if len(period_before_first) > 0:
                # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 0 –¥–æ first_test_value/7 (—Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–µ)
                days_count = len(period_before_first)
                x_values = np.arange(days_count)
                
                target_value = first_test_value / 7  # –¶–µ–ª–µ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if target_value > 0 and days_count > 1:
                    b = np.log(target_value) / (days_count - 1)
                    a = 1  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–∞–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é
                    exp_curve = exponential_growth(x_values, a, b)
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ target_value
                    if exp_curve[-1] > 0:
                        exp_curve = exp_curve * (target_value / exp_curve[-1])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    for i, date in enumerate(period_before_first):
                        daily_tests_data.append({'date': date, 'daily_tests': exp_curve[i]})
                
                print(f"üìà –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {len(period_before_first)} –¥–Ω–µ–π –æ—Ç 0 –¥–æ {target_value:.0f} —Ç–µ—Å—Ç–æ–≤/–¥–µ–Ω—å")
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        for i in range(len(country_tests)):
            current_date = country_tests.index[i]
            cumulative_tests = country_tests['Cumulative total tests'].iloc[i]
            
            if i == 0:
                # –î–ª—è –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º cumulative_tests –∫–∞–∫ –µ—Å—Ç—å
                weekly_tests = cumulative_tests
            else:
                # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ—á–µ–∫ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                prev_cumulative = country_tests['Cumulative total tests'].iloc[i-1]
                weekly_tests = cumulative_tests - prev_cumulative
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ 7 –¥–Ω—è–º
            daily_test_count = weekly_tests / 7
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
            if i == 0:
                # –î–ª—è –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏ –±–µ—Ä–µ–º 7 –¥–Ω–µ–π –¥–æ –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
                week_start = current_date - pd.Timedelta(days=6)
                week_dates = pd.date_range(start=week_start, end=current_date, freq='D')
            else:
                # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ–¥–µ–ª—å –±–µ—Ä–µ–º 7 –¥–Ω–µ–π –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                week_start = current_date - pd.Timedelta(days=6)
                week_dates = pd.date_range(start=week_start, end=current_date, freq='D')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –Ω–µ–¥–µ–ª–µ
            for date in week_dates:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
                existing_dates = [d['date'] for d in daily_tests_data]
                if date not in existing_dates:
                    daily_tests_data.append({'date': date, 'daily_tests': daily_test_count})
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
        daily_tests_df = pd.DataFrame(daily_tests_data).set_index('date').sort_index()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        country_data = country_data.merge(
            daily_tests_df, 
            left_index=True, 
            right_index=True, 
            how="left"
        )
        country_data = country_data.rename(columns={'daily_tests': 'new_tests'})
        
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω
        country_data = country_data.merge(
            country_tests[["Cumulative total tests"]], 
            left_index=True, 
            right_index=True, 
            how="left"
        )
        country_data["new_tests"] = country_data["Cumulative total tests"].diff()
        
        if not country_data.empty and pd.notna(country_data["Cumulative total tests"].iloc[0]):
            country_data["new_tests"].iloc[0] = country_data["Cumulative total tests"].iloc[0]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ)
        if country_name == "France":
            print("üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è: –∑–∞–º–µ–Ω—è–µ–º –Ω—É–ª–µ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
            first_nonzero_idx = country_data[country_data["new_tests"] > 0].index.min()
            
            if pd.notna(first_nonzero_idx):
                zero_period = country_data.loc[:first_nonzero_idx]
                
                if len(zero_period) > 1:
                    first_nonzero_value = country_data.loc[first_nonzero_idx, "new_tests"]
                    days_count = len(zero_period)
                    x_values = np.arange(days_count)
                    
                    if first_nonzero_value > 0 and days_count > 1:
                        b = np.log(first_nonzero_value) / (days_count - 1)
                        a = 1
                        exp_curve = exponential_growth(x_values, a, b)
                        
                        if exp_curve[-1] > 0:
                            exp_curve = exp_curve * (first_nonzero_value / exp_curve[-1])
                        
                        country_data.loc[zero_period.index, "new_tests"] = exp_curve
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    country_data["new_tests"] = country_data["new_tests"].fillna(0).clip(lower=0).astype(int)
    
    cases = country_data["new_cases"].fillna(0).clip(lower=0).astype(int)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å ‚â•100 —Å–ª—É—á–∞–µ–≤
    first_100 = cases[cases >= 100].index.min()
    if pd.isna(first_100):
        raise ValueError(f"–í {country_name} –Ω–µ—Ç –¥–Ω—è —Å ‚â•100 —Å–ª—É—á–∞—è–º–∏")
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è ‚â•100 —Å–ª—É—á–∞–µ–≤
    country_data = country_data.loc[first_100:]
    cases = country_data["new_cases"].fillna(0).clip(lower=0).astype(int)
    
    
    print(f"üìä {country_name}: {len(cases)} –¥–Ω–µ–π")
    print(f"üß™ –¢–µ—Å—Ç—ã: –æ—Ç {country_data['new_tests'].min():.0f} –¥–æ {country_data['new_tests'].max():.0f} –≤ –¥–µ–Ω—å")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏
    result_df = pd.DataFrame({
        "positive": cases,
        "total": country_data["new_tests"]
    })
    
    return result_df

# =============================================================================
# –®–ê–ì 5: –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ —Å –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# =============================================================================

class CompiledCovidModel:
    def __init__(self, region: str, observed: pd.DataFrame, buffer_days=10):
        self.region = region
        df = observed.copy()
        # –ë—É—Ñ–µ—Ä –≤ 10 –¥–Ω–µ–π –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏
        new_index = pd.date_range(start=df.index[0] - pd.Timedelta(days=buffer_days),
                                  end=df.index[-1], freq="D")
        df = df.reindex(new_index, fill_value=0)
        self.observed = df

        # –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:

        # –ú—ã –¥–æ–±–∞–≤–ª—è–µ–º 10 "—Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö" –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ –µ—Å—Ç—å —Ä–∞–Ω—å—à–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è, –∫–æ–≥–¥–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏).
        # –≠—Ç–∏ –¥–Ω–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω—É–ª—è–º–∏.
        # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ—Ç–æ–º—É, —á—Ç–æ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º —Å–ª—É—á–∞–∏ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è.
        # –ß—Ç–æ–±—ã –º–æ–¥–µ–ª—å –º–æ–≥–ª–∞ "–¥–æ–≥–∞–¥–∞—Ç—å—Å—è", —á—Ç–æ –≤—Å–ø—ã—à–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å —á—É—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º –ø–æ—à–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
        # –µ–π –Ω—É–∂–µ–Ω –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —ç—Ç–∏ —Å–∞–º—ã–µ buffer days.

        # –ò–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è:
        # –ë—É—Ñ–µ—Ä–Ω—ã–µ –¥–Ω–∏ –¥–∞—é—Ç –º–æ–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å ‚Äú—Ö–≤–æ—Å—Ç‚Äù —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª–µ–∑–Ω–∏ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.

        #
        # # –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ total (—Ç–µ—Å—Ç–æ–≤) ‚Äî —Å–æ–∑–¥–∞—ë–º –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –ø–æ –º–∞—Å—à—Ç–∞–±—É
        # if "total" not in self.observed.columns:
        #     base = max(10000, int(self.observed["positive"].max() * 10))
        #     self.observed["total"] = base + (self.observed["positive"] * 15).astype(int)



        self.model = None
        self.idata = None

        # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs("results", exist_ok=True)

    # === –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
    def build_model(self, max_delay=20):
        obs = self.observed
        T = len(obs) # —á–∏—Å–ª–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ (–¥–Ω–µ–π). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏.
        gt = get_generation_time_pmf(max_delay) # –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ generation interval (–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∫–æ–ª–µ–Ω–∏–π, –∏–ª–∏ serial interval). 
        # –≠—Ç–æ –≤–µ–∫—Ç–æ—Ä –≤–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å –∫–∞–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –¥–µ–Ω—å j –≤—ã–∑–æ–≤—É—Ç –Ω–æ–≤—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ k –¥–Ω–µ–π.

        delay = get_delay_distribution(max_delay) # –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ infection -> reported positive.
        # –û–Ω–æ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç, —Å –∫–∞–∫–∏–º —Å–¥–≤–∏–≥–æ–º –∑–∞—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π —Å–ª—É—á–∞–π (incubation + testing/reporting delays). –¢–æ–∂–µ –≤–µ–∫—Ç–æ—Ä —Å—É–º–º–∏—Ä—É—é—â–∏–π—Å—è –≤ 1.

        # –û–±–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ‚Äî –∫–ª—é—á–µ–≤—ã–µ —ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—Ö–æ–¥—ã: 
        # gt –¥–∏–∫—Ç—É–µ—Ç –∫–∞–∫ –ø—Ä–æ—à–ª—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–µ, delay ‚Äî –∫–∞–∫ infections –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏.
        conv_gt = _get_convolution_ready_gt(T, gt)

        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ –º–∞—Ç—Ä–∏—Ü—É, —É–¥–æ–±–Ω—É—é –¥–ª—è —Å–≤—ë—Ä—Ç–∫–∏ generation-interval —Å –≤–µ–∫—Ç–æ—Ä–æ–º –ø—Ä–æ—à–ª—ã—Ö –∏–Ω—Ñ–µ–∫—Ü–∏–π.
        # conv_gt ‚Äî –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ (T-1, T) (–≤ –∫–æ–¥–µ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ pytensor.shared), –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ t-1 —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Å–∞ gt –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è infections[t] –∫–∞–∫ —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è y * weights.
        # –≠—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –≤–º–µ—Å—Ç–æ –¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ —Å—Ä–µ–∑–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ scan, –º—ã –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞–∑–ª–æ–∂–∏–ª–∏ –≤–µ—Å–∞, —á—Ç–æ–±—ã scan –º–æ–≥ –±—ã—Å—Ç—Ä–æ –≤–∑—è—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É.
        # (–£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è _get_convolution_ready_gt ‚Äî –æ–Ω –¥–µ–ª–∞–ª —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ —Å Theano.)

        mask = obs["positive"].values > 0
        idx_nonzero = np.where(mask)[0] # –±–µ—Ä–µ–º –∏–Ω–¥–∏–∫—Å—ã –Ω–µ–Ω—É–ª—å–µ–≤—ã—Ö –¥–Ω–µ–π

        coords = {"date": obs.index.values, "nonzero_date": obs.index.values[mask]}

        with pm.Model(coords=coords) as model: # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ PyMC (pymc v4/v5). –í—Å—ë, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ with, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—Ä–∞—Ñ –º–æ–¥–µ–ª–∏.
            log_r_t = pm.GaussianRandomWalk("log_r_t", sigma=0.035, dims="date")
            # log_r_t ‚Äî —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GaussianRandomWalk: 
            # —ç—Ç–æ –∞–ø—Ä–∏–æ—Ä–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ log_r_t[t] = log_r_t[t-1] + Normal(0, sigma). Sigma 0.035 –∑–∞–¥–∞—ë—Ç –≥–ª–∞–¥–∫–æ—Å—Ç—å/—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è R(t).
            # –ü–æ—á–µ–º—É –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–µ: —á—Ç–æ–±—ã r_t –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞) –∏ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã—Ç—å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º R.
            r_t = pm.Deterministic("r_t", pm.math.exp(log_r_t), dims="date") # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç log_r_t. –≠—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ R(t) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è.

            seed = pm.Exponential("seed", 1 / 0.02) # –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–Ω—Ñ–µ–∫—Ü–∏–π –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–æ–¥–µ–ª–∏
            y0 = pt.zeros(T)
            y0 = pt.set_subtensor(y0[0], seed)

            def step(t_idx, y_prev, r_t_vec, conv_gt_mat):
                weights = conv_gt_mat[t_idx - 1]
                val = pt.sum(r_t_vec * y_prev * weights) # –Ω–æ–≤—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å t —Ä–∞–≤–Ω—ã —Å—É–º–º–µ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–Ω—è–º j
                y_new = pt.set_subtensor(y_prev[t_idx], val)
                return y_new # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä

            outputs, _ = pytensor.scan(fn=step,   #–≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∞–≥–∞ step –ø–æ t –æ—Ç 1 –¥–æ T-1.
                                       sequences=[pt.arange(1, T)],
                                       outputs_info=y0,
                                       non_sequences=[r_t, conv_gt])
            infections = pm.Deterministic("infections", outputs[-1], dims="date")

            # —Å–≤—ë—Ä—Ç–∫–∞ —Å delay
            # –ó–¥–µ—Å—å –º—ã –∫–æ–Ω–≤–æ–ª—é–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä infections —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º delay, 
            # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ —á–∏—Å–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å (–¥–æ —É—á—ë—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/reporting).
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è t –º—ã —Å—É–º–º–∏—Ä—É–µ–º infections[t-d] * delay[d] –ø–æ d = 0..maxd-1. –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è —Å–≤—ë—Ä—Ç–∫–∞.
            # –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî expected_reports[t] ‚Äî —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤ ¬´–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏¬ª, –Ω–æ –µ—â—ë –±–µ–∑ —É—á—ë—Ç–∞ –æ–±—ä—ë–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è.
            # expected_reports –¥–µ–ª–∞–µ—Ç—Å—è Deterministic, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞.

            expected_reports = pt.zeros(T)
            for t in range(T):
                s = 0.0
                maxd = min(t + 1, len(delay))
                for d in range(maxd):
                    s += outputs[-1][t - d] * delay[d]
                expected_reports = pt.set_subtensor(expected_reports[t], s)
            expected_reports = pm.Deterministic("expected_reports", expected_reports, dims="date")

            tests = pm.Data("tests", obs["total"].values, dims="date")
            exposure = pm.Deterministic("exposure", pm.math.clip(tests, obs["total"].max() * 0.1, 1e9), dims="date")
            # –Ω–µ –¥–∞–≤–∞—Ç—å exposure –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–π –≤ —Ä–∞–Ω–Ω–∏–µ –¥–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–ª–∏ 
            # –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã), –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å Rt.

            reporting_rate = pm.Beta("reporting_rate", alpha=2, beta=2) # –ø–∞—Ä–∞–º–µ—Ç—Ä, –º–æ–¥–µ–ª–∏—Ä—É—é—â–∏–π –¥–æ–ª—é –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–ª—É—á–∞–µ–≤, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ positive 
            # (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º: –Ω–µ –≤—Å–µ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è, –Ω–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã, –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.
            positive = pm.Deterministic("positive", exposure * expected_reports * reporting_rate, dims="date") # –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è —Å–≤—è–∑—ã–≤–∞–µ—Ç expected_reports (–∏–Ω—Ñ–µ–∫—Ü–∏–∏‚Üí–æ–∂–∏–¥–∞–µ–º—ã–µ –æ—Ç—á—ë—Ç—ã),
            # exposure (–º–∞—Å—à—Ç–∞–± –≤ —Å–∏–ª—É —á–∏—Å–ª–∞ —Ç–µ—Å—Ç–æ–≤) –∏ reporting_rate (–¥–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏). –í –∏—Ç–æ–≥–µ positive ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ –¥–Ω—è–º.

            alpha = pm.Gamma("alpha", mu=6, sigma=1) #–ø–∞—Ä–∞–º–µ—Ç—Ä –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (overdispersion) –¥–ª—è NegativeBinomial.
            pm.NegativeBinomial("obs", mu=positive[idx_nonzero], alpha=alpha,
                                observed=obs["positive"].values[idx_nonzero],
                                dims="nonzero_date")

            self.model = model
        return self.model

    # === –æ–±—É—á–µ–Ω–∏–µ ===
    def sample_fast(self, draws=500, tune=500, chains=2, cores=2):
        if self.model is None:
            self.build_model()
        with self.model:
            # - `draws` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **—Å–µ–º–ø–ª–æ–≤**, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ (tuning).
            # - `tune` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞" (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞).
            # - `chains` ‚Äî —á–∏—Å–ª–æ **—Ü–µ–ø–µ–π** (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤ MCMC).
            # - `cores` ‚Äî —á–∏—Å–ª–æ **–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤**.
            idata = pm.sample(draws=draws, tune=tune, chains=chains, cores=cores,
                              random_seed=42, target_accept=0.9, return_inferencedata=True)
            
            # - –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞, –º—ã –¥–µ–ª–∞–µ–º **–∞–ø–æ—Å—Ç–µ—Ä–∏–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ**:
            # - –ë–µ—Ä—ë–º –≤—Å–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–∑ posterior).
            # - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é –º–æ–¥–µ–ª—å.
            # - –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º (`positive`, `r_t`, `infections`).
            
            idata = pm.sample_posterior_predictive(idata, var_names=["positive", "r_t", "infections"],
                                                   extend_inferencedata=True)
            self.idata = idata

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            with open(f"results/{self.region}_idata.pkl", "wb") as f:
                pickle.dump(idata, f)
        return idata

    # === –ø—Ä–æ–≥–Ω–æ–∑ ===
    def forecast(self, days=13, posterior_samples=200):
        if self.idata is None:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ sample_fast()")

        obs = self.observed
        T = len(obs)
        gt = get_generation_time_pmf(20)
        delay = get_delay_distribution(20)
        exposure_last = obs["total"].iloc[-7:].mean()

        posterior = self.idata.posterior
        r_t_s = posterior["r_t"].stack(sample=("chain", "draw"))
        inf_s = posterior["infections"].stack(sample=("chain", "draw"))
        rep_s = posterior["reporting_rate"].stack(sample=("chain", "draw"))

        total_samps = r_t_s.sizes["sample"]
        sel = np.linspace(0, total_samps - 1, min(posterior_samples, total_samps)).astype(int)

        # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ Rt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ---
        rt_last_vals = [float(r_t_s.isel(sample=k).values[-1]) for k in sel]
        rt_last_mean = np.mean(rt_last_vals)
        rt_last_low, rt_last_high = np.percentile(rt_last_vals, [2.5, 97.5])

        print(f"üìä Rt_last (–ø–æ—Å–ª–µ–¥–Ω–∏–π Rt): {rt_last_mean:.3f} "
            f"[{rt_last_low:.3f}, {rt_last_high:.3f}]")

        # --- –ø—Ä–æ–≥–Ω–æ–∑ ---

        # –°–≤—ë—Ä—Ç–∫–∞ (convolution) ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –≤—ã—á–∏—Å–ª–∏—Ç—å,
        # —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è,
        # —É—á–∏—Ç—ã–≤–∞—è, —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –±—ã–ª–æ –∑–∞—Ä–∞–∂–µ–Ω–æ –≤ –ø—Ä–æ—à–ª—ã–µ –¥–Ω–∏
        # –∏ –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏—Ä—É—Å–∞

        # –í –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª—å –¥–µ–ª–∞–µ—Ç —Å–≤—ë—Ä—Ç–∫—É —á–µ—Ä–µ–∑ pytensor.scan(),
        # —á—Ç–æ–±—ã PyMC –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.

        # –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º—ã —É–∂–µ –Ω–µ –≤ –≥—Ä–∞—Ñ–µ PyMC,
        # –∞ –ø—Ä–æ—Å—Ç–æ –≤ –æ–±—ã—á–Ω–æ–º NumPy-–∫–æ–¥–µ.
        # –ü–æ—ç—Ç–æ–º—É –º—ã ‚Äú–ø–æ–≤—Ç–æ—Ä—è–µ–º‚Äù —Ç—É –∂–µ —Å–≤—ë—Ä—Ç–∫—É –≤—Ä—É—á–Ω—É—é

        forecasts = np.zeros((len(sel), days))
        rt_forecasts = np.zeros((len(sel), days))  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≥–Ω–æ–∑ Rt –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

        for i, k in enumerate(sel):
            inf_vec = inf_s.isel(sample=k).values
            r_last = float(r_t_s.isel(sample=k).values[-1])
            rep = float(rep_s.isel(sample=k).values)

            for t in range(days):
                # --- –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º Rt ---
                # Rt –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º, –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å —à—É–º, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                # –ù–∞–ø—Ä–∏–º–µ—Ä: r_t_next = np.random.lognormal(np.log(r_last), 0.05)
                # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º Rt –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.
                r_t_next = r_last
                rt_forecasts[i, t] = r_t_next

                # —Å–≤–µ—Ä—Ç–∫–∞
                L = min(len(gt) - 1, len(inf_vec))
                tail = inf_vec[-L:]
                gt_tail = gt[1:L + 1][::-1]
                new_inf = r_t_next * np.sum(tail * gt_tail)
                inf_vec = np.concatenate([inf_vec, [new_inf]])

                # inf_vec ‚Äî –≤–µ–∫—Ç–æ—Ä –∏–Ω—Ñ–µ–∫—Ü–∏–π –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
                # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ L –∑–Ω–∞—á–µ–Ω–∏–π (tail = inf_vec[-L:]) ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è.
                # –ë–µ—Ä—ë–º –∫—É—Å–æ—á–µ–∫ gt (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏) –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ ([::-1]),
                # —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Äú—Å–µ–≥–æ–¥–Ω—è ‚Üê –≤—á–µ—Ä–∞ ‚Üê –ø–æ–∑–∞–≤—á–µ—Ä–∞‚Äù.
                # –£–º–Ω–æ–∂–∞–µ–º –ø–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ –∏ —Å—É–º–º–∏—Ä—É–µ–º:

                maxd = min(len(delay), len(inf_vec))
                er = np.sum([inf_vec[-1 - d] * delay[d] for d in range(maxd)])
                pred = exposure_last * er * rep
                forecasts[i, t] = pred

        # --- —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ ---
        median = np.median(forecasts, axis=0)
        low, high = np.percentile(forecasts, [2.5, 97.5], axis=0)
        idx_future = pd.date_range(start=obs.index[-1] + pd.Timedelta(days=1), periods=days, freq="D")
        df_forecast = pd.DataFrame({
            "date": idx_future,
            "median": median,
            "low95": low,
            "high95": high
        }).set_index("date")

        # --- —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ Rt ---
        rt_median = np.median(rt_forecasts, axis=0)
        rt_low, rt_high = np.percentile(rt_forecasts, [2.5, 97.5], axis=0)
        df_rt_forecast = pd.DataFrame({
            "date": idx_future,
            "rt_median": rt_median,
            "rt_low95": rt_low,
            "rt_high95": rt_high
        }).set_index("date")

        # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ ---
        df_forecast.to_csv(f"results/{self.region}_forecast.csv")

        # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ Rt ---
        df_rt_forecast.to_csv(f"results/{self.region}_rt_forecast.csv")

        # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º Rt_last ---
        rt_info = pd.DataFrame({
            "region": [self.region],
            "rt_last_mean": [rt_last_mean],
            "rt_last_low95": [rt_last_low],
            "rt_last_high95": [rt_last_high]
        })
        rt_info.to_csv(f"results/{self.region}_rt_last.csv", index=False)

        # --- —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ ---
        self._plot_results(df_forecast)

        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ results/{self.region}_forecast.csv")
        print(f"‚úÖ Rt_last —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ results/{self.region}_rt_last.csv")
        print(f"‚úÖ Rt –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ results/{self.region}_rt_forecast.csv")

        return df_forecast

    # === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
    def _plot_results(self, df_forecast):
        import numpy as np
        import matplotlib.pyplot as plt
        import arviz as az
        import os

        obs = self.observed
        idata = self.idata
        region = self.region

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É results, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)

        # === 1Ô∏è‚É£ –ì—Ä–∞—Ñ–∏–∫ Rt ===
        r_t_mean = idata.posterior["r_t"].mean(dim=("chain", "draw")).values
        hdi_rt = az.hdi(idata.posterior["r_t"], hdi_prob=0.94)
        x_rt = np.arange(len(r_t_mean))

        # HDI Rt ‚Äî –≤ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ
        hdi_rt_values = hdi_rt.to_array().values.squeeze().T
        hdi_rt_values = hdi_rt_values[:len(x_rt)]

        plt.figure(figsize=(10, 5))
        az.plot_hdi(x_rt, hdi_rt_values, color="lightblue")
        plt.plot(x_rt, r_t_mean, color="blue", label="–°—Ä–µ–¥–Ω–µ–µ Rt")
        plt.axhline(1, color="red", linestyle="--", label="–ü–æ—Ä–æ–≥ Rt=1")
        plt.title(f"R_t - {region}")
        plt.legend()
        plt.tight_layout()
        plt.savefig(f"results/{region}_R_t.png")
        plt.close()

        # === 2Ô∏è‚É£ –ì—Ä–∞—Ñ–∏–∫ Infections ===
        infections_mean = idata.posterior["infections"].mean(dim=("chain", "draw")).values
        hdi_inf = az.hdi(idata.posterior["infections"], hdi_prob=0.94)
        x_inf = np.arange(len(infections_mean))

        hdi_inf_values = hdi_inf.to_array().values.squeeze().T
        hdi_inf_values = hdi_inf_values[:len(x_inf)]

        plt.figure(figsize=(10, 5))
        az.plot_hdi(x_inf, hdi_inf_values, color="orange")
        plt.plot(x_inf, infections_mean, color="darkorange", label="–°—Ä–µ–¥–Ω–µ–µ Infections")
        plt.title(f"Infections - {region}")
        plt.legend()
        plt.tight_layout()
        plt.savefig(f"results/{region}_infections.png")
        plt.close()

        # === 3Ô∏è‚É£ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ (Positive) ===
        plt.figure(figsize=(10, 5))
        plt.plot(obs.index, obs["positive"], label="–ù–∞–±–ª—é–¥–∞–µ–º—ã–µ —Å–ª—É—á–∞–∏", color="black")
        plt.plot(df_forecast.index, df_forecast["median"], label="–ü—Ä–æ–≥–Ω–æ–∑ (–º–µ–¥–∏–∞–Ω–∞)", color="blue")
        plt.fill_between(
            df_forecast.index,
            df_forecast["low95"],
            df_forecast["high95"],
            color="blue",
            alpha=0.2,
            label="95% –î–ò"
        )
        plt.title(f"–ü—Ä–æ–≥–Ω–æ–∑ —Å–ª—É—á–∞–µ–≤ - {region}")
        plt.legend()
        plt.tight_layout()
        plt.savefig(f"results/{region}_forecast.png")
        plt.close()

        print(f"üìä –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É results/")



# =============================================================================
# –®–ê–ì 6: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
# =============================================================================



import pickle
import pandas as pd

countries = ["Italy", "Germany", "France"]
for region in countries:


    # # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    df = load_country_data(region)

    model = CompiledCovidModel(region=region, observed=df)
    model.build_model()
    model.sample_fast(draws=500, tune=500)
    forecast_df = model.forecast(days=13)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    forecast_df.to_csv(f"{region}_forecast.csv", index=False)
    print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{region}_forecast.csv'")

    # # –°—Ç—Ä–æ–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    # model.plot_rt(save=True)
    # model.plot_cases(save=True)
    model._plot_results(forecast_df)
    print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    print(forecast_df.head())

    
# # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
# with open(rf"C:\Data\Visual Studio\–í–£–ó\–¢–µ–æ—Ä–≤–µ—Ä\results\{region}.pkl", "rb") as f:
#     model.idata = pickle.load(f)

# print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –Ω–∞ 13 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
# future_days = 13
# forecast_df = model.forecast(days=future_days)

# # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
# forecast_df.to_csv("Russia_forecast.csv", index=False)
# print("üìà –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'Russia_forecast.csv'")

# # # –°—Ç—Ä–æ–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
# model._plot_results(forecast_df)
# print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")



